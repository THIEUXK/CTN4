@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";

}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Date Range</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
</head>
<style>
    .chart-canvas {
        border: 1px solid #ddd; /* Solid border color */
        border-radius: 8px; /* Rounded corners for a softer look */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Subtle box shadow for depth */
        margin-bottom: 20px; /* Some spacing between charts */
    }

    .best-selling-product {
        display: flex;
        justify-content: space-between;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 10px;
    }

    .product-name,
    .total-quantity-sold {
        margin: 0;
    }

</style>
<div class="row">
<div class="container" style="margin-top: 100px;">
    <!-- Select box to choose between "Đơn hàng" and "Tổng tiền đơn hàng" -->
    <div class="row">
        <div class="col-md-12 mb-3">
            <label for="chartType">Thống kê theo:</label>
                <select id="chartType" class="form-control" onchange="toggleCharts()">
                <option value="donHang">Đơn hàng</option>
                <option value="tongTienDonHang">Tổng tiền đơn hàng</option>
            </select>
        </div>
    </div>

    <!-- Date range inputs and chart for "Đơn hàng" -->
    <div id="donHangSection">
        <div class="row">
            <div class="col-md-6">
                <label for="startDate">Ngày bắt đầu :</label>
                <input type="date" id="startDate" name="startDate" class="form-control datepicker">
            </div>
            <div class="col-md-6">
                <label for="endDate">Ngày kết thúc:</label>
                <input type="date" id="endDate" name="endDate" class="form-control datepicker">
            </div>
            <div class="col-md-12 mt-3">
                <button type="submit" id="dataDate" class="btn btn-primary">Thống kê</button>
            </div>
        </div>

        <div class="row mt-12">
            <div class="col-md-11">
                <h3>Đơn hàng</h3>
                    <canvas id="myChartj" class="chart-canvas"></canvas>
            </div>
        </div>
    </div>

    <!-- Date range inputs and chart for "Tổng tiền đơn hàng" -->
    <div id="tongTienDonHangSection" style="display: none;">
        <div class="row">
            <div class="col-md-6">
                <label for="startDates">Start Date:</label>
                <input type="date" id="startDates" name="startDate" class="form-control datepicker">
            </div>
            <div class="col-md-6">
                <label for="endDates">End Date:</label>
                <input type="date" id="endDates" name="endDate" class="form-control datepicker">
            </div>
            <div class="col-md-12 mt-3">
                <button type="submit" id="dataDates" class="btn btn-primary">Thống kê</button>
            </div>
        </div>

        <div class="row mt-12">
            <div class="col-md-11">
                <h3> Tổng tiền đơn hàng</h3>
                    <canvas id="myChartjj" class="chart-canvas"></canvas>
            </div>
        </div>
    </div>

</div>
</div>

<div class="row mt-4">
    <div class="col-md-5" style="margin-top:50px">
        <h3>Tổng doanh thu trong năm</h3>
        <canvas id="myCharts" class="chart-canvas"></canvas>
    </div>
    <div class="col-md-5" style="margin-top:50px">
        <h3>Tổng đơn hàng trong năm</h3>
        <canvas id="myChartss" class="chart-canvas"></canvas>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-5" style="margin-top:50px">
        <h3>Tổng hóa đơn lịch sử</h3>
        <canvas id="myChart" class="chart-canvas"></canvas>
    </div>
    <div class="col-md-5" style="margin-top:50px">
        <h3>Sản phẩm bán chạy</h3>
      <a class="sidebar-link" asp-area="Admin" asp-controller="QuanLySpBc" asp-action="AllSpindex">Xem chi tiết</a>
        <div id="bestSellingProductsContainer"></div>
    </div>
</div>
<div>
    <label for="selectYear">Chọn Năm:</label>
    <select id="selectYear" onchange="capNhatBieuDo()">
        @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 20; i--)
        {
            <option value="@i">@i</option>
        }
    </select>

    <canvas id="myChartNam"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>


<script>
    function toggleCharts() {
        var chartType = document.getElementById("chartType").value;
        if (chartType === "donHang") {
            document.getElementById("donHangSection").style.display = "block";
            document.getElementById("tongTienDonHangSection").style.display = "none";
        } else if (chartType === "tongTienDonHang") {
            document.getElementById("donHangSection").style.display = "none";
            document.getElementById("tongTienDonHangSection").style.display = "block";
        }
    }

    $(document).ready(function () {
        // Thống kê Hóa Đơn

        const currentDate = new Date();
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);

        // Set the end date to the last day of the current month
        const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);

        // Set the values in the date inputs
        document.getElementById('startDate').valueAsDate = firstDayOfMonth;
        document.getElementById('endDate').valueAsDate = lastDayOfMonth;
        document.getElementById('startDates').valueAsDate = firstDayOfMonth;
        document.getElementById('endDates').valueAsDate = lastDayOfMonth;
        document.getElementById('selectYear').addEventListener('change', capNhatBieuDo);
        // Call the dataDate function to perform statistical analysis for the current month
        dataDate();
        dataDates();
       // thongKeNam();
       
        $('#dataDate').click(function () {
            dataDate();
        });
        $('#dataDates').click(function () {
            dataDates();
        });
     

        function drawChart(chartId, label, dataUrl) {
            $.ajax({
                url: dataUrl,   
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    console.log(data);
                    const ctx = document.getElementById(chartId);
                    const myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12'],
                            datasets: [{
                                label: label,
                                data: data,
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                },
                error: function (error) {
                    console.error('Đã xảy ra lỗi:', error);
                }
            });
        }

        // Thống kê Hóa Đơn
        drawChart('myChart', 'Hóa Đơn', '/Admin/Home/thongke');

        // Thống kê Tổng tiền
        drawChart('myCharts', 'Tổng tiền', '/Admin/Home/thongkeHd');

        // Thống kê Hóa Đơn (phương thức khác)
        drawChart('myChartss', 'Hóa Đơn', '/Admin/Home/thongke');

      //  drawChart('myChartss', 'Hóa Đơn', '/Admin/Home/thongke');

        // Thống kê sản phẩm bán chạy nhất  
        $.ajax({
            url: "/Admin/Home/GetBestSellingProducts",
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                var container = $('#bestSellingProductsContainer');
                container.empty();

                if (data && data.length > 0) {
                    var itemsPerPage = 5;
                    var totalPages = Math.ceil(data.length / itemsPerPage);

                    // Assuming you have a variable for the current page, e.g., currentPage
                    var currentPage = 1;

                    // Calculate the starting and ending index for the current page
                    var startIndex = (currentPage - 1) * itemsPerPage;
                    var endIndex = Math.min(startIndex + itemsPerPage, data.length);

                    for (var i = startIndex; i < endIndex; i++) {
                        var product = data[i];
                        var productHtml = '<div class="best-selling-product">';
                        productHtml += '<p class="product-name">Tên sản phẩm: ' + product.productName + '</p>';
                        productHtml += '<p class="total-quantity-sold">Số lượng đã bán: ' + product.totalQuantitySold + '</p>';
                        productHtml += '</div>';
                        container.append(productHtml);
                    }

                    // Add pagination controls
                    var paginationHtml = '<div class="pagination">';
                    for (var page = 1; page <= totalPages; page++) {
                        paginationHtml += '<span class="page-link" onclick="changePage(' + page + ')">' + page + '</span>';
                    }
                    paginationHtml += '</div>';
                    container.append(paginationHtml);
                } else {
                    // Display a message when there are no products
                    container.html('<p>Hiện tại không có sản phẩm đủ điều kiện.</p>');
                }
            },
            error: function (error) {
                console.error('Error:', error);
            }
        });

        function changePage(page) {
            currentPage = page;
            // Call the Ajax function again or update the displayed items based on the current page
        }


        function dataDate() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            // Check if both start date and end date are selected
            if (!startDateInput.value || !endDateInput.value) {
                alert("Vui lòng chọn đúng đầu vào. Không vượt quá 31 ngày");
                return;
            }

            // Parse the date values to compare them
            const currentDate = new Date();
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            // Check if the start date is greater than the current date
            if (startDate > currentDate) {
                alert("Ngày bắt đầu không được lớn hơn ngày hiện tại");
                return;
            }

            // Check if the start date is greater than the end date
            if (startDate > endDate) {
                alert("Ngày bắt đầu phải nhỏ hơn ngày kết thúc");
                return;
            }

            // Calculate the number of days in the selected date range
            const numberOfDays = calculateNumberOfDays(startDateInput.value, endDateInput.value);

            // Check if the number of days is more than 31
            if (numberOfDays > 31) {
                alert("Vui lòng chọn đúng đầu vào. Không vượt quá 31 ngày");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/Admin/Home/thongkeTrongKhoang",
                data: { ngaybatdau: startDateInput.value, ngayketthuc: endDateInput.value },
                success: function (result) {
                    updateChartDatas(result, numberOfDays, startDateInput);
                    console.log(result);
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }


        function calculateNumberOfDays(startDate, endDate) {
            // Tính số ngày giữa hai ngày
            const start = new Date(startDate);
            const end = new Date(endDate);
            const timeDiff = Math.abs(end - start);
            const numberOfDays = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

            return numberOfDays;
        }
        function capNhatBieuDo() {
            const selectedYear = document.getElementById('selectYear').value;

            // Gửi yêu cầu đến server để lấy dữ liệu thống kê cho năm được chọn
            $.ajax({
                type: 'POST',
                url: '/Admin/Home/ThongKenam',
                data: { nam: selectedYear },
                dataType: 'json',
                success: function (data) {
                   
                    renderChart(data);
                },
                error: function (error) {
                    console.error('Error fetching data:', error);
                }
            });
        }

        let myChartInstance = null; // Biến toàn cục để theo dõi biểu đồ

        function renderChart(thongKeData) {
            const ctx = document.getElementById('myChartNam').getContext('2d');
            console.log('datas', thongKeData);
            // Hủy biểu đồ hiện tại trước khi tạo mới
            if (myChartInstance) {
                myChartInstance.destroy();
            }

            // Tạo một mảng với tên của 12 tháng
            const monthLabels = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12'];

            myChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: monthLabels, // Sử dụng mảng monthLabels làm labels
                    datasets: [{
                        label: '#Tổng Tiền',
                        data: thongKeData, // Giữ nguyên dữ liệu
                        borderWidth: 1,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Gọi hàm khi trang được tải
        capNhatBieuDo();


        // Gọi thống kê lần đầu khi trang được load

        let myChart = null;

        function updateChartDatas(data, numberOfDays, startDateInput) {
            const ctx = document.getElementById('myChartj');
            if (myChart) {
                myChart.destroy();
            }

            let labels = [];

            if (numberOfDays <= 31) {
                // Nếu số ngày ít hơn hoặc bằng 31, hiển thị theo ngày
                const startDate = new Date(startDateInput.value);
                labels = Array.from({ length: numberOfDays }, (_, i) => {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    return formatDateNoYear(date); // Use a function without year
                });
            } else {
                // Nếu số ngày lớn hơn 31, hiển thị theo tháng
                const startMonth = new Date(startDateInput.value).getMonth();
                for (let i = 0; i < numberOfDays / 30; i++) {
                    labels.push(`Tháng ${startMonth + i + 1}`);
                }
            }

            myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '#Hóa đơn',
                        data: data, // Giả sử 'data' là một mảng điểm dữ liệu tương ứng trong kết quả
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Add a new function to format the date without the year
        function formatDateNoYear(date) {
            const options = { month: 'numeric', day: 'numeric' };
            return date.toLocaleDateString('en-US', options);
        }

        function dataDates() {
            const startDateInput = document.getElementById('startDates');
            const endDateInput = document.getElementById('endDates');

            // Check if both start date and end date are selected
            if (!startDateInput.value || !endDateInput.value) {
                alert("Vui lòng chọn đúng đầu vào. Không vượt quá 31 ngày");
                return;
            }

            // Parse the date values to compare them
            const currentDate = new Date();
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            // Check if the start date is greater than the current date
            if (startDate > currentDate) {
                alert("Ngày bắt đầu không được lớn hơn ngày hiện tại");
                return;
            }

            // Check if the start date is greater than the end date
            if (startDate > endDate) {
                alert("Ngày bắt đầu phải nhỏ hơn ngày kết thúc");
                return;
            }

            // Calculate the number of days in the selected date range
            const numberOfDays = calculateNumberOfDays(startDateInput.value, endDateInput.value);

            // Check if the number of days is more than 31
            if (numberOfDays > 31) {
                alert("Vui lòng chọn đúng đầu vào. Không vượt quá 31 ngày");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/Admin/Home/thongkeTrongKhoangTien",
                data: { ngaybatdau: startDateInput.value, ngayketthuc: endDateInput.value },
                success: function (result) {
                    updateChartData(result, numberOfDays, startDateInput);
                    console.log(result);
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }


        function calculateNumberOfDays(startDate, endDate) {
            // Tính số ngày giữa hai ngày
            const start = new Date(startDate);
            const end = new Date(endDate);
            const timeDiff = Math.abs(end - start);
            const numberOfDays = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

            return numberOfDays;
        }

        let myCharts = null;

        function updateChartData(data, numberOfDays, startDateInput) {
            const ctx = document.getElementById('myChartjj');
            if (myCharts) {
                myCharts.destroy();
            }

            let labels = [];

            if (numberOfDays <= 31) {
                // Nếu số ngày ít hơn hoặc bằng 31, hiển thị theo ngày
                const startDate = new Date(startDateInput.value);
                labels = Array.from({ length: numberOfDays }, (_, i) => {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    return formatDateNoYear(date); // Use a function without year
                });
            } else {
                // Nếu số ngày lớn hơn 31, hiển thị theo tháng
                const startMonth = new Date(startDateInput.value).getMonth();
                for (let i = 0; i < numberOfDays / 30; i++) {
                    labels.push(`Tháng ${startMonth + i + 1}`);
                }
            }

            myCharts = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '#Hóa đơn',
                        data: data, // Giả sử 'data' là một mảng điểm dữ liệu tương ứng trong kết quả
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Add a new function to format the date without the year
        function formatDateNoYear(date) {
            const options = { month: 'numeric', day: 'numeric' };
            return date.toLocaleDateString('en-US', options);
        }
    });

</script>



